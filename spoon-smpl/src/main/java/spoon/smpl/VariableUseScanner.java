package spoon.smpl;

import spoon.reflect.code.CtTypeAccess;
import spoon.reflect.declaration.CtElement;
import spoon.reflect.declaration.CtVariable;
import spoon.reflect.reference.CtVariableReference;
import spoon.reflect.visitor.CtScanner;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * VariableUseScanner is a CtScanner that scans a given AST and records the set
 * of variable names that are used in some manner.
 *
 * In order to support the needs of clients in an SmPL context, the scanner also
 * records occurrences of type names indicated to be known variable names. Type
 * names that can be seen as variables in an SmPL context can occur in declarations
 * (e.g "T varname;") or in CtTypeAccesses generated by Spoon for ambiguous terms
 * having names starting with a capital letter (e.g "foo(T);").
 *
 * Note that if a variable name occurs more than once in different forms, only
 * the most recently encountered form will be recorded in the result. For example:
 *    scanning "{ int x; }"           will result in the map {x -> CtLocalVariable instance}
 *    scanning "{ int x; x = x + 1; } will result in the map {x -> CtLocalVariableReference instance}
 */
public class VariableUseScanner extends CtScanner {
    /**
     * Create a new VariableUseScanner using no known variable names.
     *
     * @param element AST to scan
     */
    public VariableUseScanner(CtElement element) {
        this(element, new ArrayList<>());
    }

    /**
     * Create a new VariableUseScanner using a list of known variable names.
     *
     * @param element AST to scan
     * @param knownVariableNames List of known variable names
     */
    public VariableUseScanner(CtElement element, List<String> knownVariableNames) {
        this.knownVariableNames = knownVariableNames;
        this.result = new HashMap<>();

        scan(element);
    }

    /**
     * Get the variables found to be used in the scanned AST.
     *
     * @return Map of variable names to the CtElements in which they appeared
     */
    public Map<String, CtElement> getResult() {
        return result;
    }

    /**
     * Scanner implementation.
     *
     * @param e AST to scan
     */
    @Override
    protected void enter(CtElement e) {
        if (e instanceof CtVariable) {
            String varname = ((CtVariable<?>) e).getReference().getSimpleName();
            String typename = ((CtVariable<?>) e).getType().getSimpleName();

            result.put(varname, e);

            if (knownVariableNames.contains(typename)) {
                result.put(typename, e);
            }
        } else if (e instanceof CtVariableReference) {
            result.put(((CtVariableReference<?>) e).getSimpleName(), e);
        } else if (e instanceof CtTypeAccess) {
            String typename = ((CtTypeAccess<?>) e).getAccessedType().getSimpleName();

            if (knownVariableNames.contains(typename)) {
                result.put(typename, e);
            }
        }
    }

    /**
     * List of known variable names. The scanner will collect names occurring as
     * CtTypeAccess only if they are present in this list.
     */
    private List<String> knownVariableNames;

    /**
     * List of variable names used in scanned AST.
     */
    private Map<String, CtElement> result;
}
