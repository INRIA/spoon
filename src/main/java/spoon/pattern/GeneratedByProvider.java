/**
 * Copyright (C) 2006-2017 INRIA and contributors
 * Spoon - http://spoon.gforge.inria.fr/
 *
 * This software is governed by the CeCILL-C License under French law and
 * abiding by the rules of distribution of free software. You can use, modify
 * and/or redistribute the software under the terms of the CeCILL-C license as
 * circulated by CEA, CNRS and INRIA at http://www.cecill.info.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-C license and that you accept its terms.
 */
package spoon.pattern;

import java.util.HashMap;

import spoon.Metamodel;
import spoon.pattern.node.ConstantNode;
import spoon.pattern.node.ElementNode;
import spoon.pattern.node.ListOfNodes;
import spoon.pattern.node.RootNode;
import spoon.reflect.code.CtJavaDoc;
import spoon.reflect.code.CtComment.CommentType;
import spoon.reflect.cu.CompilationUnit;
import spoon.reflect.cu.SourcePosition;
import spoon.reflect.declaration.CtElement;
import spoon.reflect.declaration.CtType;
import spoon.reflect.declaration.CtTypeMember;
import spoon.reflect.path.CtRole;

/**
 */
class GeneratedByProvider {
	public String getGeneratedByComment(CtElement ele) {
		SourcePosition pos = ele.getPosition();
		if (pos != null) {
			CompilationUnit cu = pos.getCompilationUnit();
			if (cu != null) {
				CtType<?> mainType = cu.getMainType();
				if (mainType != null) {
					StringBuilder result = new StringBuilder();
					result.append("Generated by ");
					result.append(mainType.getQualifiedName());
					appendInnerTypedElements(result, mainType, ele);
					result.append('(');
					result.append(mainType.getSimpleName());
					result.append(".java:");
					result.append(pos.getLine());
					result.append(')');
					return  result.toString();
				}
			}
		}
		return null;
	}
	protected void appendInnerTypedElements(StringBuilder result, CtType<?> mainType, CtElement ele) {
		CtTypeMember typeMember = getFirst(ele, CtTypeMember.class);
		if (typeMember != null && typeMember != mainType) {
			if (typeMember.isParentInitialized()) {
				appendInnerTypedElements(result, mainType, typeMember.getParent());
			}
			if (typeMember instanceof CtType) {
				result.append('$');
			} else {
				result.append('#');
			}
			result.append(typeMember.getSimpleName());
		}
	}
	@SuppressWarnings("unchecked")
	protected <T extends CtElement> T getFirst(CtElement ele, Class<T> clazz) {
		if (ele != null) {
			if (clazz.isAssignableFrom(ele.getClass())) {
				return (T) ele;
			}
			if (ele.isParentInitialized()) {
				return getFirst(ele.getParent(), clazz);
			}
		}
		return null;
	}

	public void addGeneratedByComment(RootNode node, String generatedBy) {
		if (node instanceof ElementNode) {
			ElementNode elementNode = (ElementNode) node;
			ListOfNodes commentNode = (ListOfNodes) elementNode.getOrCreateNodeOfRole(CtRole.COMMENT, new HashMap<>());
			ElementNode javaDocComment = getJavaDocComment(commentNode);
			String content = javaDocComment.getValueOfRole(CtRole.COMMENT_CONTENT, String.class);
			if (content == null) {
				return;
			}
			String EOL = System.getProperty("line.separator");
			if (content.trim().length() > 0) {
				content += EOL + EOL;
			}
			content += generatedBy;
			javaDocComment.setNodeOfRole(CtRole.COMMENT_CONTENT, new ConstantNode(content));
		}
	}

	private ElementNode getJavaDocComment(ListOfNodes commentNode) {
		for (RootNode node : commentNode.getNodes()) {
			if (node instanceof ElementNode) {
				ElementNode eleNode = (ElementNode) node;
				if (eleNode.getElementType().getModelInterface() == CtJavaDoc.class) {
					return eleNode;
				}
			}
		}
		ElementNode node = new ElementNode(Metamodel.getMetamodelTypeByClass(CtJavaDoc.class));
		node.setNodeOfRole(CtRole.COMMENT_TYPE, new ConstantNode(CommentType.JAVADOC));
		node.setNodeOfRole(CtRole.COMMENT_CONTENT, new ConstantNode(""));
		commentNode.getNodes().add(node);
		return node;
	}
}
