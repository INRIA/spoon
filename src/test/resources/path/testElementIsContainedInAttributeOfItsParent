#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#superType
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#superType#packageRef
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#superType#typeArgument[name=T]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#typeParameter[name=T]#superType#typeArgument[name=T]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#executableRef
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#executableRef#declaringType
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#executableRef#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#executableRef#type#packageRef
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#executableRef#argumentType[name=Class]#typeArgument[name=?]#boundingType
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#executableRef#argumentType[name=Class]#typeArgument[name=?]#boundingType#packageRef
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#argument[index=0]#target
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#argument[index=0]#target#accessedType
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#argument[index=0]#variable
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#argument[index=0]#variable#declaringType
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#constructor[signature=()]#body#statement[index=0]#argument[index=0]#variable#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#method[signature=continueExecution()]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#method[signature=continueExecution()]#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#method[signature=continueExecution()]#body#statement[index=1]#expression
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AdvancedOptions]#method[signature=preserveUnusedVars()]#body#statement[index=1]#expression#variable#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AnnotationProcessingOptions]#method[signature=processors(java.lang.String)]#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AnnotationProcessingOptions]#method[signature=processors(java.lang.String)]#body#statement[index=0]#condition
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AnnotationProcessingOptions]#method[signature=processors(java.lang.String)]#body#statement[index=0]#condition#leftOperand
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AnnotationProcessingOptions]#method[signature=processors(java.lang.String)]#body#statement[index=0]#condition#leftOperand#rightOperand
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AnnotationProcessingOptions]#method[signature=processors(java.lang.String)]#body#statement[index=0]#then
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=AnnotationProcessingOptions]#method[signature=processors(java.lang.String[])]#parameter[name=processors]#type#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=ClasspathOptions]#method[signature=binaries(java.lang.String)]#body#statement[index=0]#then#statement[index=0]#expression#argument[index=0]#type
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=ClasspathOptions]#method[signature=binaries(java.io.File)]#body#statement[index=0]#else
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#interface[name=JDTBuilder]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#field[name=args]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#field[name=args]#defaultExpression
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=classpathOptions(spoon.compiler.builder.ClasspathOptions)]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=classpathOptions(spoon.compiler.builder.ClasspathOptions)]#annotation[index=0]
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=classpathOptions(spoon.compiler.builder.ClasspathOptions)]#annotation[index=0]#annotationType
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=sources(spoon.compiler.builder.SourceOptions)]#body#statement[index=0]#assigned
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=sources(spoon.compiler.builder.SourceOptions)]#body#statement[index=0]#assignment
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=build()]#body#statement[index=0]#expression#argument[index=0]#type#type#packageRef
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=JDTBuilderImpl]#method[signature=checkSources()]#body#statement[index=0]#then#statement[index=0]#expression
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=Options]#method[signature=join(java.lang.String,java.lang.String[])]#body#statement[index=2]#foreachVariable
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=Options]#method[signature=join(java.lang.String,java.lang.String[])]#body#statement[index=2]#expression
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=SourceOptions]#method[signature=sources(java.util.List)]#body#statement[index=1]#body#statement[index=0]#else#statement[index=0]#body#statement[index=3]#argument[index=0]#executableRef#type#packageRef
#subPackage[name=spoon]#subPackage[name=compiler]#subPackage[name=builder]#containedType[name=SourceOptions]#method[signature=sources(java.util.List)]#body#statement[index=1]#body#statement[index=0]#else#statement[index=0]#catch[index=0]#parameter
#subPackage[name=spoon]#subPackage[name=compiler]#containedType[name=Environment]#method[signature=report(spoon.processing.Processor,org.apache.log4j.Level,spoon.reflect.declaration.CtElement,java.lang.String)]#comment[index=0]
#subPackage[name=spoon]#subPackage[name=compiler]#containedType[name=InvalidClassPathException]#constructor[signature=()]
#subPackage[name=spoon]#subPackage[name=compiler]#containedType[name=SpoonResourceHelper]#method[signature=isFile(java.io.File)]#body#statement[index=0]#expression#rightOperand#expression
#subPackage[name=spoon]#subPackage[name=compiler]#containedType[name=SpoonResourceHelper]#method[signature=resources(java.lang.String[])]#thrown[name=FileNotFoundException]
#subPackage[name=spoon]#subPackage[name=decompiler]#containedType[name=CFRDecompiler]#method[signature=decompile(java.lang.String)]#body#statement[index=0]#argument[index=0]#type#type#packageRef
#subPackage[name=spoon]#subPackage[name=legacy]#containedType[name=NameFilter]#method[signature=getType()]#annotation[index=0]#annotationType#packageRef
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=ConceptKind]#constructor[signature=()]#body#statement[index=0]#executableRef#argumentType[name=int]
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MMMethodKind]#field[name=detector]
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MMMethodKind]#value[name=GET]#defaultExpression#argument[index=2]#type
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MMMethodKind]#value[name=GET]#defaultExpression#argument[signature=java.util.function.Predicatespoon.reflect.declaration.CtMethodbooleanspoon.reflect.declaration.CtMethodgetParameters()isEmpty()booleanspoon.reflect.declaration.CtMethodgetSimpleName()startsWith(java.lang.String)java.lang.Stringspoon.reflect.declaration.CtMethodgetSimpleName()startsWith(java.lang.String)java.lang.String]
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MMMethodKind]#value[name=GET]#defaultExpression#argument[signature=java.util.function.Predicatespoon.reflect.declaration.CtMethodbooleanspoon.reflect.declaration.CtMethodgetParameters()isEmpty()booleanspoon.reflect.declaration.CtMethodgetSimpleName()startsWith(java.lang.String)java.lang.Stringspoon.reflect.declaration.CtMethodgetSimpleName()startsWith(java.lang.String)java.lang.String]#expression
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=Metamodel]#method[signature=getOrCreateConcept(spoon.reflect.declaration.CtType)]#body#statement[index=1]#expression#argument[signature=java.util.function.Supplierspoon.metamodel.MetamodelConcept(java.lang.String)java.lang.String]
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelConcept]#method[signature=getTypeContext()]#body#statement[index=0]#then#statement[index=0]#assignment#argument[index=0]#condition
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelConcept]#method[signature=getTypeContext()]#body#statement[index=0]#then#statement[index=0]#assignment#argument[index=0]#then
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelConcept]#method[signature=getTypeContext()]#body#statement[index=0]#then#statement[index=0]#assignment#argument[index=0]#else
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelProperty]#method[signature=detectValueType()]#body#statement[name=mmGetMethod]
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelProperty]#method[signature=getIdxOfBestMatchByInputParameter(java.util.List,spoon.metamodel.MMMethodKind,spoon.reflect.reference.CtTypeReference)]#body#statement[name=maxMatchLevel]#type#declaringType
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelProperty]#method[signature=getIdxOfBestMatchByInputParameter(java.util.List,spoon.metamodel.MMMethodKind,spoon.reflect.reference.CtTypeReference)]#body#statement[index=3]
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelProperty]#method[signature=getIdxOfBestMatchByInputParameter(java.util.List,spoon.metamodel.MMMethodKind,spoon.reflect.reference.CtTypeReference)]#body#statement[index=3]#expression
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelProperty]#method[signature=getIdxOfBestMatchByInputParameter(java.util.List,spoon.metamodel.MMMethodKind,spoon.reflect.reference.CtTypeReference)]#body#statement[index=3]#expression#rightOperand#executableRef#type
#subPackage[name=spoon]#subPackage[name=metamodel]#containedType[name=MetamodelProperty]#nestedType[name=MatchLevel]
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=matcher]#containedType[name=ChainOfMatchersImpl]#method[signature=createFromList(spoon.pattern.internal.matcher.Matchers,java.util.List,int)]#body#statement[index=1]#expression
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=matcher]#containedType[name=MatchingScanner]#method[signature=searchMatchInSet(spoon.reflect.path.CtRole,java.util.Set)]#body#statement[index=0]#then#statement[index=1]#body#statement[name=nextTobeMatched]
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=matcher]#containedType[name=TobeMatched]#method[signature=create(spoon.support.util.ImmutableMap,spoon.reflect.meta.ContainerKind,java.lang.Object)]#body#statement[index=0]#expression
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=matcher]#containedType[name=TobeMatched]#method[signature=create(spoon.support.util.ImmutableMap,spoon.reflect.meta.ContainerKind,java.lang.Object)]#body#statement[index=0]#expression#variable#type#packageRef
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=matcher]#containedType[name=TobeMatched]#method[signature=create(spoon.support.util.ImmutableMap,spoon.reflect.meta.ContainerKind,java.lang.Object)]#body#statement[index=0]#case[index=0]#expression
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=node]#containedType[name=AbstractRepeatableMatcher]#method[signature=matchOptionalTargets(spoon.pattern.internal.matcher.TobeMatched,spoon.pattern.internal.matcher.Matchers)]#body#statement[index=1]#case[index=1]#statement[index=0]#statement[name=match]
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=node]#containedType[name=ElementNode]#method[signature=create(java.util.List,java.util.Map)]#body#statement[index=1]#expression#argument[index=0]#target#executableRef#argumentType[name=Function]#typeArgument[index=1;name=?]#boundingType
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=node]#containedType[name=ElementNode]#method[signature=generateSingleNodeAttributes(spoon.pattern.internal.DefaultGenerator,spoon.reflect.declaration.CtElement,spoon.support.util.ImmutableMap)]#body#statement[index=0]#body#statement[name=mmField]
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=node]#containedType[name=ElementNode]#annonymousExecutable[signature=spoon.pattern.internal.node.ElementNodespoon.pattern.internal.node.ElementNodejava.util.Mapput(java.lang.Object,java.lang.Object)spoon.reflect.path.CtRolespoon.reflect.path.CtRolespoon.reflect.path.CtRolejava.lang.Class[]java.lang.Objectjava.lang.Objectjava.lang.Classspoon.pattern.internal.node.ElementNodespoon.pattern.internal.node.ElementNodejava.util.Mapput(java.lang.Object,java.lang.Object)spoon.reflect.path.CtRolespoon.reflect.path.CtRolespoon.reflect.path.CtRolejava.lang.Class[]java.lang.Objectjava.lang.Objectjava.lang.Classspoon.pattern.internal.node.ElementNodespoon.pattern.internal.node.ElementNodejava.util.Mapput(java.lang.Object,java.lang.Object)spoon.reflect.path.CtRolespoon.reflect.path.CtRolespoon.reflect.path.CtRolejava.lang.Class[]spoon.reflect.reference.CtExecutableReferencespoon.reflect.reference.CtExecutableReferencejava.lang.Classspoon.pattern.internal.node.ElementNodespoon.pattern.internal.node.ElementNodejava.util.Mapput(java.lang.Object,java.lang.Object)spoon.reflect.path.CtRolespoon.reflect.path.CtRolespoon.reflect.path.CtRolejava.lang.Class[]spoon.reflect.reference.CtExecutableReferencespoon.reflect.reference.CtExecutableReferencejava.lang.Class]
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=node]#containedType[name=RootNode]#field[name=MATCH_ALL]#defaultExpression#nestedType
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=node]#containedType[name=StringNode]#method[signature=matchTarget(java.lang.Object,spoon.support.util.ImmutableMap)]#body#statement[index=6]#body#statement[index=1]#assignment#target#expression
#subPackage[name=spoon]#subPackage[name=pattern]#subPackage[name=internal]#subPackage[name=parameter]#containedType[name=MapParameterInfo]#method[signature=addValueAs(java.lang.Object,java.util.function.Function)]#body#statement[index=1]#then#statement[index=4]#then#statement[index=1]#body#statement[name=newEntryKey]
#subPackage[name=spoon]#subPackage[name=pattern]#containedType[name=InlinedStatementConfigurator]#method[signature=inlineIfOrForeachReferringTo(java.lang.String)]#body#statement[index=0]#argument[index=0]#executableRef
#subPackage[name=spoon]#subPackage[name=processing]#containedType[name=Property]#annotation[index=1]#value[key=value]#variable#type#packageRef
#subPackage[name=spoon]#subPackage[name=processing]#containedType[name=Property]#method[signature=value()]#defaultExpression
#subPackage[name=spoon]#subPackage[name=reflect]#subPackage[name=visitor]#containedType[name=CtBiScannerDefault]#method[signature=biScan(spoon.reflect.declaration.CtElement,spoon.reflect.declaration.CtElement)]#body#statement[index=2]#finalizer
#subPackage[name=spoon]#subPackage[name=reflect]#subPackage[name=visitor]#containedType[name=DefaultJavaPrettyPrinter]#method[signature=visitCtBinaryOperator(spoon.reflect.code.CtBinaryOperator)]#body#statement[index=5]
#subPackage[name=spoon]#subPackage[name=support]#subPackage[name=compiler]#subPackage[name=jdt]#containedType[name=JDTTreeBuilderHelper]#method[signature=createVariableAccessNoClasspath(org.eclipse.jdt.internal.compiler.ast.SingleNameReference)]#body#statement[index=9]#then#statement[index=1]#else#statement[name=executable]
#subPackage[name=spoon]#subPackage[name=support]#subPackage[name=compiler]#subPackage[name=jdt]#containedType[name=JDTTreeBuilderHelper]#method[signature=createVariableAccessNoClasspath(org.eclipse.jdt.internal.compiler.ast.SingleNameReference)]#body#statement[index=9]#then#statement[index=1]#else#statement[index=3]#condition
#subPackage[name=spoon]#subPackage[name=support]#subPackage[name=compiler]#containedType[name=SnippetCompilationHelper]#method[signature=compileAndReplaceSnippetsIn(spoon.reflect.declaration.CtType)]#body#statement[index=2]#expression#target#argument[index=0]#executableRef#type#typeArgument[name=CtElement]#packageRef
#subPackage[name=spoon]#subPackage[name=support]#subPackage[name=reflect]#subPackage[name=reference]#containedType[name=CtCatchVariableReferenceImpl]#method[signature=getDeclaration()]#body#statement[index=3]#body#statement[index=0]#expression
#subPackage[name=spoon]#subPackage[name=support]#subPackage[name=sniper]#subPackage[name=internal]#containedType[name=ElementSourceFragment]#annonymousExecutable[signature=java.lang.Stringchars()forEach(java.util.function.IntConsumer)java.util.function.IntConsumerintspoon.support.sniper.internal.ElementSourceFragmentspoon.support.sniper.internal.ElementSourceFragmentjava.util.Setadd(java.lang.Object)java.lang.String(char[])java.lang.CharactertoChars(int)int]
#subPackage[name=spoon]#subPackage[name=support]#subPackage[name=sniper]#subPackage[name=internal]#containedType[name=ElementSourceFragment]#method[signature=onCharSequence(spoon.support.sniper.internal.ElementSourceFragment$CharType,java.lang.StringBuilder,java.util.function.Consumer)]#body#statement[index=4]#body#statement[index=1]#then#statement[name=identifier]
