# Workflow for testing Spoon.
#
# Note that actions are specified by commit hash. This is to avoid the security
# risk of someone injecting malicious code into a release and then simply
# changing a tag.

name: tests
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  schedule:
  - cron: "0 0 * * *"

env:
  JAVA_DISTRIBUTION: temurin

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [11, 17]
        os: [ubuntu-latest, windows-latest]
        exclude:
          - os: windows-latest
            java: 17


    env:
      MAVEN_OPTS: -Djava.src.version=${{ matrix.java }} -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false

    name: Tests with Java ${{ matrix.java }} on ${{ matrix.os }}
    steps:
      - name: Disable Git's autocrlf
        run: git config --global core.autocrlf false
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0
      - uses: actions/setup-java@f0bb91606209742fe3ea40199be2f3ef195ecabf # renovate: tag=v2.5.0
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Get date for cache # see https://github.com/actions/cache README
        id: get-date
        run: echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - name: Use Maven dependency cache
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # renovate: tag=v2.1.7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Use silent log config
        run: mv chore/logback.xml src/test/resources/
      - name: Build
        run: |
          mvn -B test-compile
      - name: Fetch final dependencies
        # this is a hack to download the final test dependencies required to actually run the tests
        run: timeout 20 mvn -B test || echo "Done fetching dependencies"
        shell: bash
      - name: Test
        run: mvn test

  coverage:
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false
    name: Test with coverage
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0
      - uses: actions/setup-java@f0bb91606209742fe3ea40199be2f3ef195ecabf # renovate: tag=v2.5.0
        with:
          java-version: 17
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Get date for cache # see https://github.com/actions/cache README
        id: get-date
        run: echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - name: Use Maven dependency cache
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # renovate: tag=v2.1.7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Use silent log config
        run: mv chore/logback.xml src/test/resources/
      - name: Build
        run: |
          mvn -B test-compile
      - name: Test with coverage
        run: mvn -Pcoveralls test jacoco:report coveralls:report -DrepoToken=$GITHUB_TOKEN -DserviceName=github -DpullRequest=$PR_NUMBER --fail-never
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}

  extra:
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false
    name: Extra checks
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0
        with:
          fetch-depth: 0
      - uses: actions/setup-java@f0bb91606209742fe3ea40199be2f3ef195ecabf # renovate: tag=v2.5.0
        with:
          java-version: 17
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - uses: actions/setup-python@f38219332975fe8f9c04cca981d674bf22aea1d3 # renovate: tag=v2.3.1
        with:
          python-version: 3.6

      - name: Get date for cache # see https://github.com/actions/cache README
        id: get-date
        run: echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      - name: Use Maven dependency cache
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed # renovate: tag=v2.1.7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Use silent log config
        run: mv chore/logback.xml src/test/resources/
      - name: Run extra checks
        run: ./chore/ci-extra.sh
      - name: Run Javadoc quality check
        run: ./chore/check-javadoc-regressions.py COMPARE_WITH_MASTER

  code-quality: # we create a new step here because qodana analyzer takes around 10min
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false
      QODANA_LINTER: jetbrains/qodana-jvm-community:2021.3
    name: code-quality qodana
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0
        with:
          path: pull_request
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # renovate: tag=v2.4.0
        with:
          path: master
          ref: master
      - name: copy config file
        run: cp pull_request/qodana.yml master/qodana.yml
      - uses: actions/setup-java@f0bb91606209742fe3ea40199be2f3ef195ecabf # renovate: tag=v2.5.0
        with:
          java-version: 17
          distribution: ${{ env.JAVA_DISTRIBUTION }}
      - name: "Create folder"
        run: "mkdir -p ${{ github.workspace }}/result/master"
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@dd16bb55f53c4d8008b3da5573bf2c958ad016b2 # renovate: tag=v4.2.3
        with:
          linter: ${{ env.QODANA_LINTER }}
          project-dir: "${{ github.workspace }}/master"
          inspected-dir: ./src/main/java # only main spoon project at first
          results-dir:  "${{ github.workspace }}/result/master"
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@dd16bb55f53c4d8008b3da5573bf2c958ad016b2 # renovate: tag=v4.2.3
        continue-on-error: true
        with:
          linter: ${{ env.QODANA_LINTER }}
          project-dir: "${{ github.workspace }}/pull_request"
          inspected-dir: ./src/main/java # only main spoon project at first
          baseline-path: "/data/results/master/qodana.sarif.json"
          baseline-include-absent: true
          results-dir:  "${{ github.workspace }}/result"
          fail-threshold: 1
          upload-result: false
      - name: Print problems(full)
        run: jq '.runs | .[0].results | map(select (.baselineState == "new"))' ${{ github.workspace }}/result/qodana.sarif.json
      - name: Print problems(short)
        run: |
          jq -r '.runs
          | .[0].results
          | map(
             select (.baselineState == "new") |
             {
                 text: .message.text,
                 location: .locations | map({
                       snippet: .physicalLocation.contextRegion.snippet.text,
                       file: .physicalLocation.artifactLocation.uri,
                       position: ((.physicalLocation.contextRegion.startLine | tostring) + ":" + (.physicalLocation.contextRegion.startColumn | tostring))
                   })
             }
          )
          | map(
             "## " + .text + "\n" +
             (.location
               | map(
                 "In file " + .file + " at " + .position + "\n```java\n" + .snippet + "\n```"
               )
               | join("\n")
             )
          )
          | join("\n\n----\n\n")' \
          ${{ github.workspace }}/result/qodana.sarif.json
          VIOLATIONS=$(jq '.runs | .[0].results | map(select (.baselineState == "new")) | length' ${{ github.workspace }}/result/qodana.sarif.json)
          if [ "$VIOLATIONS" -gt "0" ]; then exit 1; fi
